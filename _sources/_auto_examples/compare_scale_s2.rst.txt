
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/compare_scale_s2.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_compare_scale_s2.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_compare_scale_s2.py:


Compare Sentinel-2 scale/offset evolution during time
=================================================================

Using SCL data from L2A

.. GENERATED FROM PYTHON SOURCE LINES 8-10

Import librairies
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 10-15

.. code-block:: default


    from earthdaily import earthdatastore
    import geopandas as gpd
    from matplotlib import pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 16-18

Load plot
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 18-22

.. code-block:: default


    # load geojson
    pivot = gpd.read_file("pivot.geojson")








.. GENERATED FROM PYTHON SOURCE LINES 23-25

Init earthdatastore with env params
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 25-29

.. code-block:: default


    eds = earthdatastore.Auth()









.. GENERATED FROM PYTHON SOURCE LINES 30-32

Search for collection items


.. GENERATED FROM PYTHON SOURCE LINES 32-45

.. code-block:: default

    def get_cube(rescale=True):
        pivot_cube = eds.datacube(
            "sentinel-2-l2a",
            intersects=pivot,
            datetime=["2022-01-01", "2022-03-10"],
            assets=["red", "green", "blue"],
            mask_with="native",  # same as scl
            mask_statistics=-1,  # boolean or int (n_jobs) to compute in parallel if small
            rescale=rescale,
        )
        return pivot_cube









.. GENERATED FROM PYTHON SOURCE LINES 46-48

Get cube with rescale (*0.0001)
----------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 48-53

.. code-block:: default


    pivot_cube = get_cube(rescale=False) * 0.0001
    pivot_cube.clear_percent_scl.plot.scatter(x="time")
    plt.show()




.. image-sg:: /_auto_examples/images/sphx_glr_compare_scale_s2_001.png
   :alt: spatial_ref = 32614
   :srcset: /_auto_examples/images/sphx_glr_compare_scale_s2_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Clear coverage statistics:   0%|          | 0/28 [00:00<?, ?item/s]    Clear coverage statistics:  11%|█         | 3/28 [00:00<00:00, 28.30item/s]    Clear coverage statistics:  21%|██▏       | 6/28 [00:03<00:16,  1.36item/s]    Clear coverage statistics:  29%|██▊       | 8/28 [00:05<00:13,  1.45item/s]    Clear coverage statistics:  36%|███▌      | 10/28 [00:06<00:11,  1.52item/s]    Clear coverage statistics:  43%|████▎     | 12/28 [00:07<00:10,  1.59item/s]    Clear coverage statistics:  50%|█████     | 14/28 [00:08<00:08,  1.67item/s]    Clear coverage statistics:  57%|█████▋    | 16/28 [00:09<00:07,  1.67item/s]    Clear coverage statistics:  64%|██████▍   | 18/28 [00:10<00:05,  1.71item/s]    Clear coverage statistics:  71%|███████▏  | 20/28 [00:11<00:04,  1.67item/s]    Clear coverage statistics:  79%|███████▊  | 22/28 [00:13<00:03,  1.68item/s]    Clear coverage statistics:  86%|████████▌ | 24/28 [00:14<00:02,  1.65item/s]    Clear coverage statistics:  93%|█████████▎| 26/28 [00:15<00:01,  1.70item/s]    Clear coverage statistics: 100%|██████████| 28/28 [00:16<00:00,  1.71item/s]    Clear coverage statistics: 100%|██████████| 28/28 [00:16<00:00,  1.68item/s]




.. GENERATED FROM PYTHON SOURCE LINES 54-56

Plots cube with SCL with at least 50% of clear data
----------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 56-62

.. code-block:: default

    pivot_cube = pivot_cube.sel(time=pivot_cube.time[pivot_cube.clear_percent_scl > 50])

    pivot_cube.to_array(dim="band").plot.imshow(vmin=0, vmax=0.33, col="time", col_wrap=3)

    plt.show()




.. image-sg:: /_auto_examples/images/sphx_glr_compare_scale_s2_002.png
   :alt: time = 2022-01-07, time = 2022-01-09, time = 2022-01-22, time = 2022-01-29, time = 2022-02-03, time = 2022-02-11, time = 2022-02-16, time = 2022-02-18, time = 2022-02-26, time = 2022-02-28, time = 2022-03-03, time = 2022-03-08
   :srcset: /_auto_examples/images/sphx_glr_compare_scale_s2_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 63-65

Get cube with automatic rescale (default option)
----------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 65-70

.. code-block:: default


    pivot_cube = get_cube()
    pivot_cube.clear_percent_scl.plot.scatter(x="time")
    plt.show()




.. image-sg:: /_auto_examples/images/sphx_glr_compare_scale_s2_003.png
   :alt: spatial_ref = 32614
   :srcset: /_auto_examples/images/sphx_glr_compare_scale_s2_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Clear coverage statistics:   0%|          | 0/28 [00:00<?, ?item/s]    Clear coverage statistics:  14%|█▍        | 4/28 [00:01<00:09,  2.43item/s]    Clear coverage statistics:  21%|██▏       | 6/28 [00:02<00:07,  3.05item/s]    Clear coverage statistics:  29%|██▊       | 8/28 [00:03<00:08,  2.49item/s]    Clear coverage statistics:  36%|███▌      | 10/28 [00:04<00:07,  2.34item/s]    Clear coverage statistics:  43%|████▎     | 12/28 [00:05<00:07,  2.16item/s]    Clear coverage statistics:  50%|█████     | 14/28 [00:06<00:06,  2.07item/s]    Clear coverage statistics:  57%|█████▋    | 16/28 [00:07<00:05,  2.00item/s]    Clear coverage statistics:  64%|██████▍   | 18/28 [00:08<00:04,  2.03item/s]    Clear coverage statistics:  71%|███████▏  | 20/28 [00:09<00:03,  2.08item/s]    Clear coverage statistics:  79%|███████▊  | 22/28 [00:10<00:02,  2.10item/s]    Clear coverage statistics:  86%|████████▌ | 24/28 [00:10<00:01,  2.13item/s]    Clear coverage statistics:  93%|█████████▎| 26/28 [00:11<00:00,  2.15item/s]    Clear coverage statistics: 100%|██████████| 28/28 [00:12<00:00,  2.22item/s]    Clear coverage statistics: 100%|██████████| 28/28 [00:12<00:00,  2.21item/s]




.. GENERATED FROM PYTHON SOURCE LINES 71-73

Plots cube with SCL with at least 50% of clear data
----------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 73-78

.. code-block:: default

    pivot_cube = pivot_cube.sel(time=pivot_cube.time[pivot_cube.clear_percent_scl > 50])

    pivot_cube.to_array(dim="band").plot.imshow(vmin=0, vmax=0.33, col="time", col_wrap=3)

    plt.show()



.. image-sg:: /_auto_examples/images/sphx_glr_compare_scale_s2_004.png
   :alt: time = 2022-01-07, time = 2022-01-09, time = 2022-01-22, time = 2022-01-29, time = 2022-02-03, time = 2022-02-11, time = 2022-02-16, time = 2022-02-18, time = 2022-02-26, time = 2022-02-28, time = 2022-03-03, time = 2022-03-08
   :srcset: /_auto_examples/images/sphx_glr_compare_scale_s2_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (3 minutes 44.918 seconds)


.. _sphx_glr_download__auto_examples_compare_scale_s2.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: compare_scale_s2.py <compare_scale_s2.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: compare_scale_s2.ipynb <compare_scale_s2.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
