
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/first_steps_create_datacube.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_first_steps_create_datacube.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_first_steps_create_datacube.py:


First steps to create a datacube
===============================================================

To create a datacube using Earth Data Store from EarthDaily you have two possibilities.

The first one is the more classic one, you request items, then you build your datacube, and then you can mask pixels using a cloudmask asset.
The second one is the most turnkey one, the one we recommend, it allows to do all the process at once.

.. GENERATED FROM PYTHON SOURCE LINES 13-15

Import librairies
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 15-20

.. code-block:: default


    from earthdaily import earthdatastore
    import geopandas as gpd
    from matplotlib import pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 21-22

Loading geometry

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default


    geometry = gpd.read_file("pivot.geojson")








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Init earthdaily and check available assets

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: default


    eds = earthdatastore.Auth()  # using config from ENV








.. GENERATED FROM PYTHON SOURCE LINES 31-33

Create datacube (all in one)
--------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 33-52

.. code-block:: default


    s2_datacube = eds.datacube(
        "sentinel-2-l2a",
        assets=["blue", "green", "red", "nir"],
        intersects=geometry,
        datetime=["2022-07"],
        mask_with="native",  # equal to "scl" for sentinel-2
        mask_statistics=True,
    )

    s2_datacube.clear_percent_scl.plot.scatter(x="time")
    plt.title("Percentage of clear pixels on the study site")
    plt.show()
    print(s2_datacube)

    s2_datacube[["red", "green", "blue"]].to_array(dim="band").plot.imshow(
        vmin=0, vmax=0.2, col="time", col_wrap=4
    )




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /_auto_examples/images/sphx_glr_first_steps_create_datacube_001.png
         :alt: Percentage of clear pixels on the study site
         :srcset: /_auto_examples/images/sphx_glr_first_steps_create_datacube_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /_auto_examples/images/sphx_glr_first_steps_create_datacube_002.png
         :alt: time = 2022-07-01, time = 2022-07-03, time = 2022-07-06, time = 2022-07-08, time = 2022-07-11, time = 2022-07-13, time = 2022-07-16, time = 2022-07-18, time = 2022-07-21, time = 2022-07-23, time = 2022-07-26, time = 2022-07-28, time = 2022-07-31
         :srcset: /_auto_examples/images/sphx_glr_first_steps_create_datacube_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Clear coverage statistics:   0%|          | 0/13 [00:00<?, ?item/s]    Clear coverage statistics:   8%|▊         | 1/13 [00:01<00:18,  1.55s/item]    Clear coverage statistics:  15%|█▌        | 2/13 [00:02<00:14,  1.32s/item]    Clear coverage statistics:  23%|██▎       | 3/13 [00:03<00:12,  1.22s/item]    Clear coverage statistics:  31%|███       | 4/13 [00:04<00:10,  1.21s/item]    Clear coverage statistics:  38%|███▊      | 5/13 [00:06<00:09,  1.20s/item]    Clear coverage statistics:  46%|████▌     | 6/13 [00:07<00:08,  1.15s/item]    Clear coverage statistics:  54%|█████▍    | 7/13 [00:08<00:06,  1.12s/item]    Clear coverage statistics:  62%|██████▏   | 8/13 [00:09<00:05,  1.09s/item]    Clear coverage statistics:  69%|██████▉   | 9/13 [00:10<00:04,  1.05s/item]    Clear coverage statistics:  77%|███████▋  | 10/13 [00:11<00:03,  1.06s/item]    Clear coverage statistics:  85%|████████▍ | 11/13 [00:12<00:02,  1.09s/item]    Clear coverage statistics:  92%|█████████▏| 12/13 [00:13<00:01,  1.09s/item]    Clear coverage statistics: 100%|██████████| 13/13 [00:14<00:00,  1.10s/item]    Clear coverage statistics: 100%|██████████| 13/13 [00:14<00:00,  1.13s/item]
    <xarray.Dataset>
    Dimensions:            (time: 13, y: 61, x: 61)
    Coordinates:
      * y                  (y) float64 4.581e+06 4.58e+06 ... 4.58e+06 4.58e+06
      * x                  (x) float64 7.063e+05 7.063e+05 ... 7.069e+05 7.069e+05
        spatial_ref        int32 32614
      * time               (time) datetime64[ns] 2022-07-01 ... 2022-07-31
        clear_pixels_scl   (time) int64 0 88 0 1100 131 ... 2957 2957 106 0 2957
        clear_percent_scl  (time) int8 0 2 0 37 4 100 5 100 100 100 3 0 100
    Data variables:
        blue               (time, y, x) float64 dask.array<chunksize=(1, 61, 61), meta=np.ndarray>
        green              (time, y, x) float64 dask.array<chunksize=(1, 61, 61), meta=np.ndarray>
        red                (time, y, x) float64 dask.array<chunksize=(1, 61, 61), meta=np.ndarray>
        nir                (time, y, x) float64 dask.array<chunksize=(1, 61, 61), meta=np.ndarray>
    Attributes:
        usable_pixels:  2957

    <xarray.plot.facetgrid.FacetGrid object at 0x7f54d72ad390>



.. GENERATED FROM PYTHON SOURCE LINES 53-55

Create datacube in three steps
--------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 57-58

Request items

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: default


    items = eds.search(
        "sentinel-2-l2a", intersects=geometry, datetime=["2022-07"]
    )








.. GENERATED FROM PYTHON SOURCE LINES 64-66

Creata datacube (independent from being log into earthdatastore)
We request the "scl" assets which is the native cloudmask

.. GENERATED FROM PYTHON SOURCE LINES 66-71

.. code-block:: default


    s2_datacube = earthdatastore.datacube(
        items, assets=["blue", "green", "red", "nir", "scl"], intersects=geometry
    )








.. GENERATED FROM PYTHON SOURCE LINES 72-73

Mask datacube

.. GENERATED FROM PYTHON SOURCE LINES 73-84

.. code-block:: default


    # intersects or bbox are asked in order to compute accurate mask statistics

    s2_datacube = earthdatastore.mask.Mask(s2_datacube, intersects=geometry).scl(
        mask_statistics=True
    )

    #
    s2_datacube[["red", "green", "blue"]].to_array(dim="band").plot.imshow(
        vmin=0, vmax=0.2, col="time", col_wrap=4
    )



.. image-sg:: /_auto_examples/images/sphx_glr_first_steps_create_datacube_003.png
   :alt: time = 2022-07-01, time = 2022-07-03, time = 2022-07-06, time = 2022-07-08, time = 2022-07-11, time = 2022-07-13, time = 2022-07-16, time = 2022-07-18, time = 2022-07-21, time = 2022-07-23, time = 2022-07-26, time = 2022-07-28, time = 2022-07-31
   :srcset: /_auto_examples/images/sphx_glr_first_steps_create_datacube_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Clear coverage statistics:   0%|          | 0/13 [00:00<?, ?item/s]    Clear coverage statistics:   8%|▊         | 1/13 [00:00<00:10,  1.16item/s]    Clear coverage statistics:  15%|█▌        | 2/13 [00:01<00:08,  1.28item/s]    Clear coverage statistics:  23%|██▎       | 3/13 [00:02<00:07,  1.39item/s]    Clear coverage statistics:  31%|███       | 4/13 [00:02<00:06,  1.43item/s]    Clear coverage statistics:  38%|███▊      | 5/13 [00:03<00:05,  1.42item/s]    Clear coverage statistics:  46%|████▌     | 6/13 [00:04<00:04,  1.49item/s]    Clear coverage statistics:  54%|█████▍    | 7/13 [00:05<00:04,  1.33item/s]    Clear coverage statistics:  62%|██████▏   | 8/13 [00:05<00:03,  1.39item/s]    Clear coverage statistics:  69%|██████▉   | 9/13 [00:06<00:02,  1.43item/s]    Clear coverage statistics:  77%|███████▋  | 10/13 [00:07<00:02,  1.47item/s]    Clear coverage statistics:  85%|████████▍ | 11/13 [00:07<00:01,  1.51item/s]    Clear coverage statistics:  92%|█████████▏| 12/13 [00:08<00:00,  1.53item/s]    Clear coverage statistics: 100%|██████████| 13/13 [00:09<00:00,  1.46item/s]    Clear coverage statistics: 100%|██████████| 13/13 [00:09<00:00,  1.43item/s]

    <xarray.plot.facetgrid.FacetGrid object at 0x7f54f53f7e90>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (3 minutes 27.484 seconds)


.. _sphx_glr_download__auto_examples_first_steps_create_datacube.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: first_steps_create_datacube.py <first_steps_create_datacube.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: first_steps_create_datacube.ipynb <first_steps_create_datacube.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
